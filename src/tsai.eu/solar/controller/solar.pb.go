// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tsai.eu/solar/controller/solar.proto

package controller

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SetupMessage struct {
	Setup                string   `protobuf:"bytes,1,opt,name=Setup,proto3" json:"Setup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetupMessage) Reset()         { *m = SetupMessage{} }
func (m *SetupMessage) String() string { return proto.CompactTextString(m) }
func (*SetupMessage) ProtoMessage()    {}
func (*SetupMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_304cfb64bcde0875, []int{0}
}

func (m *SetupMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetupMessage.Unmarshal(m, b)
}
func (m *SetupMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetupMessage.Marshal(b, m, deterministic)
}
func (m *SetupMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetupMessage.Merge(m, src)
}
func (m *SetupMessage) XXX_Size() int {
	return xxx_messageInfo_SetupMessage.Size(m)
}
func (m *SetupMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SetupMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SetupMessage proto.InternalMessageInfo

func (m *SetupMessage) GetSetup() string {
	if m != nil {
		return m.Setup
	}
	return ""
}

type StatusMessage struct {
	Status               string   `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusMessage) Reset()         { *m = StatusMessage{} }
func (m *StatusMessage) String() string { return proto.CompactTextString(m) }
func (*StatusMessage) ProtoMessage()    {}
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_304cfb64bcde0875, []int{1}
}

func (m *StatusMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusMessage.Unmarshal(m, b)
}
func (m *StatusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusMessage.Marshal(b, m, deterministic)
}
func (m *StatusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusMessage.Merge(m, src)
}
func (m *StatusMessage) XXX_Size() int {
	return xxx_messageInfo_StatusMessage.Size(m)
}
func (m *StatusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StatusMessage proto.InternalMessageInfo

func (m *StatusMessage) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*SetupMessage)(nil), "tsai.eu.SetupMessage")
	proto.RegisterType((*StatusMessage)(nil), "tsai.eu.StatusMessage")
}

func init() {
	proto.RegisterFile("tsai.eu/solar/controller/solar.proto", fileDescriptor_304cfb64bcde0875)
}

var fileDescriptor_304cfb64bcde0875 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x29, 0x4e, 0xcc,
	0xd4, 0x4b, 0x2d, 0xd5, 0x2f, 0xce, 0xcf, 0x49, 0x2c, 0xd2, 0x4f, 0xce, 0xcf, 0x2b, 0x29, 0xca,
	0xcf, 0xc9, 0x49, 0x2d, 0x82, 0x08, 0xe8, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0xb1, 0x43, 0x55,
	0x29, 0xa9, 0x70, 0xf1, 0x04, 0xa7, 0x96, 0x94, 0x16, 0xf8, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7,
	0x0a, 0x89, 0x70, 0xb1, 0x82, 0xf9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x92,
	0x3a, 0x17, 0x6f, 0x70, 0x49, 0x62, 0x49, 0x69, 0x31, 0x4c, 0x99, 0x18, 0x17, 0x1b, 0x44, 0x00,
	0xaa, 0x0e, 0xca, 0x33, 0x7a, 0xc9, 0xcc, 0xc5, 0xe5, 0x0c, 0xb7, 0x52, 0xc8, 0x92, 0x8b, 0xcd,
	0xb9, 0x28, 0x35, 0xb1, 0x24, 0x55, 0x48, 0x54, 0x0f, 0x6a, 0xa3, 0x1e, 0xb2, 0x75, 0x52, 0x62,
	0x08, 0x61, 0x64, 0xf3, 0x95, 0x18, 0x84, 0xac, 0xb8, 0xd8, 0x5d, 0x52, 0x8b, 0x4b, 0x8a, 0xf2,
	0x2b, 0x49, 0xd7, 0x6b, 0xc1, 0xc5, 0x1a, 0x5c, 0x92, 0x58, 0x54, 0x42, 0xba, 0x4e, 0x73, 0x2e,
	0x96, 0xe0, 0x92, 0xfc, 0x02, 0xd2, 0x35, 0xda, 0x70, 0x71, 0x3a, 0xe7, 0xe7, 0xa5, 0x65, 0xa6,
	0x97, 0x16, 0x91, 0xe1, 0x59, 0x3b, 0x2e, 0xee, 0xa0, 0xd4, 0x64, 0xf2, 0xf5, 0x5b, 0x70, 0xb1,
	0x06, 0xa5, 0x16, 0xa7, 0x92, 0xe1, 0x61, 0x4b, 0x58, 0x44, 0x92, 0xac, 0xd5, 0x49, 0x2a, 0x4a,
	0x02, 0x57, 0x5a, 0x4b, 0x62, 0x03, 0x27, 0x33, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa1,
	0xaa, 0xe2, 0xe4, 0x8e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	Create(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error)
	Destroy(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error)
	Start(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error)
	Stop(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error)
	Configure(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error)
	Reconfigure(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error)
	Reset(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error)
	Status(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Create(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/tsai.eu.Controller/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Destroy(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/tsai.eu.Controller/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Start(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/tsai.eu.Controller/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Stop(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/tsai.eu.Controller/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Configure(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/tsai.eu.Controller/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Reconfigure(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/tsai.eu.Controller/Reconfigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Reset(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/tsai.eu.Controller/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Status(ctx context.Context, in *SetupMessage, opts ...grpc.CallOption) (*StatusMessage, error) {
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, "/tsai.eu.Controller/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	Create(context.Context, *SetupMessage) (*StatusMessage, error)
	Destroy(context.Context, *SetupMessage) (*StatusMessage, error)
	Start(context.Context, *SetupMessage) (*StatusMessage, error)
	Stop(context.Context, *SetupMessage) (*StatusMessage, error)
	Configure(context.Context, *SetupMessage) (*StatusMessage, error)
	Reconfigure(context.Context, *SetupMessage) (*StatusMessage, error)
	Reset(context.Context, *SetupMessage) (*StatusMessage, error)
	Status(context.Context, *SetupMessage) (*StatusMessage, error)
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) Create(ctx context.Context, req *SetupMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedControllerServer) Destroy(ctx context.Context, req *SetupMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (*UnimplementedControllerServer) Start(ctx context.Context, req *SetupMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedControllerServer) Stop(ctx context.Context, req *SetupMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedControllerServer) Configure(ctx context.Context, req *SetupMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedControllerServer) Reconfigure(ctx context.Context, req *SetupMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconfigure not implemented")
}
func (*UnimplementedControllerServer) Reset(ctx context.Context, req *SetupMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (*UnimplementedControllerServer) Status(ctx context.Context, req *SetupMessage) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsai.eu.Controller/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Create(ctx, req.(*SetupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsai.eu.Controller/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Destroy(ctx, req.(*SetupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsai.eu.Controller/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Start(ctx, req.(*SetupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsai.eu.Controller/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Stop(ctx, req.(*SetupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsai.eu.Controller/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Configure(ctx, req.(*SetupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Reconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Reconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsai.eu.Controller/Reconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Reconfigure(ctx, req.(*SetupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsai.eu.Controller/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Reset(ctx, req.(*SetupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tsai.eu.Controller/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Status(ctx, req.(*SetupMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tsai.eu.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Controller_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Controller_Destroy_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Controller_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Controller_Stop_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Controller_Configure_Handler,
		},
		{
			MethodName: "Reconfigure",
			Handler:    _Controller_Reconfigure_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Controller_Reset_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Controller_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tsai.eu/solar/controller/solar.proto",
}
